// Generated by CoffeeScript 2.7.0
(async function() {
  var className, enableInputBox, forgetEquation, getInputBoxes, i, imgURL, inputBox, inputBoxes, knownEquation, len, observer, rememberEquation, removeOldEquations;

  imgURL = chrome.runtime.getURL('icon.png');

  className = 'qe-input-box';

  removeOldEquations = function(equations) {
    var equation, month, now, results;
    month = 30 * 24 * 60 * 60 * 1000;
    now = Date.now();
    results = [];
    for (equation in equations) {
      if (now - equations[equation] > month) {
        results.push(delete equations[equation]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  rememberEquation = async function(equation) {
    var items, knownEquations, ref;
    items = (await chrome.storage.sync.get('knownEquations'));
    knownEquations = (ref = items.knownEquations) != null ? ref : {};
    removeOldEquations(knownEquations);
    knownEquations[equation] = Date.now();
    return (await chrome.storage.sync.set({
      knownEquations: knownEquations
    }));
  };

  forgetEquation = async function(equation) {
    var items, knownEquations, ref;
    items = (await chrome.storage.sync.get('knownEquations'));
    knownEquations = (ref = items.knownEquations) != null ? ref : {};
    removeOldEquations(knownEquations);
    delete knownEquations[equation];
    return (await chrome.storage.sync.set({
      knownEquations: knownEquations
    }));
  };

  knownEquation = async function(equation) {
    var items, knownEquations, ref;
    items = (await chrome.storage.sync.get('knownEquations'));
    knownEquations = (ref = items.knownEquations) != null ? ref : {};
    return equation in knownEquations;
  };

  enableInputBox = async function(element) {
    var button, elementValue, equation, equationBox, hide, image, isInput, known, ref, show, wrapper;
    if (!element || element.classList.contains(className)) {
      return;
    }
    wrapper = element.tagName === 'DIV' ? element : element.parentNode.closest('[jsname]');
    if (!wrapper) {
      return;
    }
    element.classList.add(className);
    image = document.createElement('img');
    image.src = imgURL;
    image.style.display = 'block';
    button = document.createElement('button');
    button.type = 'button';
    button.tabIndex = -1;
    button.style.background = 'none';
    button.style.border = 'none';
    button.style.cursor = 'pointer';
    button.style.padding = '0';
    button.appendChild(image);
    // Avoid highlighting input element on click
    button.onmousedown = function(e) {
      return e.preventDefault();
    };
    elementValue = function() {
      var ref;
      return (ref = element.value) != null ? ref : element.textContent;
    };
    equation = null;
    equationBox = null;
    isInput = (ref = element.tagName) === 'INPUT' || ref === 'TEXTAREA';
    show = function() {
      var inputBox;
      rememberEquation(elementValue());
      equationBox = document.createElement('div');
      equationBox.classList.add(className);
      equationBox.style.marginTop = '5px';
      equationBox.style.fontSize = '1.5em';
      wrapper.parentNode.insertBefore(equationBox, wrapper);
      if (isInput) {
        inputBox = element;
      } else {
        inputBox = document.createElement('textarea');
        inputBox.value = elementValue();
      }
      return equation = new Equation(inputBox, equationBox);
    };
    hide = function() {
      equation.disable();
      equation = null;
      equationBox.remove();
      equationBox = null;
      return forgetEquation(elementValue());
    };
    button.onclick = function() {
      var ref1;
      if (equation) {
        return hide();
      }
      show();
      if ((ref1 = element.tagName) === 'INPUT' || ref1 === 'TEXTAREA') {
        return element.focus();
      }
    };
    if (isInput) {
      element.parentNode.insertBefore(button, element.nextSibling);
    } else {
      button.style.float = 'right';
      element.appendChild(button);
    }
    known = (await knownEquation(elementValue()));
    if (known) {
      return show();
    }
  };

  getInputBoxes = function() {
    return document.querySelectorAll('[data-response] input[data-initial-value], [data-response] textarea[data-initial-value], div:has(+[data-noresponses]) > div > div');
  };

  inputBoxes = getInputBoxes();

  if (inputBoxes) {
    await import(chrome.runtime.getURL('load-math.js'));
    for (i = 0, len = inputBoxes.length; i < len; i++) {
      inputBox = inputBoxes[i];
      enableInputBox(inputBox);
    }
    observer = new MutationObserver(function() {
      var j, len1, results;
      inputBoxes = getInputBoxes();
      results = [];
      for (j = 0, len1 = inputBoxes.length; j < len1; j++) {
        inputBox = inputBoxes[j];
        if (inputBox.tagName !== 'DIV') {
          inputBox.style.display = 'inline-block';
        }
        results.push(enableInputBox(inputBox));
      }
      return results;
    });
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }

}).call(this);

//# sourceMappingURL=google-forms.js.map
